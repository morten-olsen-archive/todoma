{"version":3,"sources":["src/models/RemoteTaskProvider.ts","src/models/RemoteTask.ts","src/models/LocalTask.ts","src/services/Providers.ts","src/services/Tasks.ts","src/models/index.ts","src/db/create.ts","src/hooks/useAsync.ts","src/providers/Github/index.ts","src/configs/db.web.ts","src/contexts/ServicesContext.tsx","src/hooks/useTasks.ts","src/typography/index.ts","src/components/base/Row/Cell.tsx","src/components/base/Row/PlaceholderIcon.tsx","src/components/base/Row/index.tsx","src/components/base/Button/index.tsx","src/components/base/Header/index.tsx","src/components/task/ListItem/Transition.tsx","src/components/task/ListItem/index.tsx","src/containers/tasks/Group.tsx","src/components/base/Input/index.tsx","src/hooks/useAddTask.ts","src/containers/tasks/AddToInbox/index.tsx","src/components/Page/index.tsx","src/screens/tasks/Today/index.tsx","src/containers/tasks/List.tsx","src/screens/tasks/Backlog.tsx","src/screens/tasks/Completed.tsx","src/screens/tasks/Watching.tsx","src/screens/tasks/Add/index.tsx","src/screens/more/Main/index.tsx","src/hooks/useTask.ts","src/screens/tasks/Details/index.tsx","src/Router/index.tsx","src/theme/Light.ts","src/App.tsx","src/index.ts"],"names":["RemoteTaskProvider","Entity","PrimaryColumn","Column","RemoteTask","nullable","ManyToOne","ManyToMany","LocalTask","task","remoteTasks","Tree","type","String","JoinTable","TreeChildren","TreeParent","ProviderFactories","factories","get","name","this","ProviderService","Service","providerList","connection","getProviderType","id","a","async","findOneOrFail","entity","getProvider","config","JSON","parse","providerTask","add","provider","nanoid","stringify","save","getRemoteTask","providerId","taskId","getTask","getRepository","TaskService","EventSubscriber","providerService","find","query","queryBuilder","createQueryBuilder","finalQueryBuilder","getManyAndCount","tasks","getById","relations","toggleCompleted","completionDate","Date","emit","togglePinned","pinned","setStatus","status","create","title","addRemoteTask","localId","remoteId","current","providerType","remoteTask","push","event","EventEmitter","models","States","createDB","options","createConnection","entities","synchronize","GithubProvider","token","split","repo","issueId","data","description","body","raw","dataType","pullRequest","open","state","headers","Authorization","axios","baseURL","setupGithubProvider","githubProvider","autoSave","location","ServicesContext","createContext","ServicesProvider","children","useState","undefined","setError","services","setServices","setup","useCallback","providerFactories","github","db","getConnection","dbConfig","Container","set","Connection","taskService","useEffect","catch","err","console","error","Provider","value","useAsync","fn","Loading","setState","result","setResult","update","Ready","Failed","useTasks","useContext","fetch","listener","addListener","removeListener","service","BaseText","styled","Text","color","theme","colors","text","bold","font","baseSize","Jumbo","Title1","Body1","Overline","Link","Wrapper","View","margins","medium","background","flex","direction","align","Touch","TouchableOpacity","Cell","onPress","others","node","size","Children","componentOrString","input","Component","Row","top","left","right","overline","primary","small","sizes","corners","Button","style","Header","back","actions","navigation","useNavigation","insets","useSafeAreaInsets","marginTop","goBack","Ionicons","map","action","key","ListItemTransition","icon","transition","allowedTransitions","changeStatus","includes","ListItem","Transition","TaskGroup","length","navigate","screen","params","InputField","TextInput","shade","Input","label","onChangeText","placeholder","useAddTask","AddToInbox","useTheme","addTask","setValue","Keyboard","dismiss","KeyboardAvoiding","KeyboardAvoidingView","Page","keyboardShown","setKeyboardShown","keyboardDidShow","keyboardDidHide","Pressable","backgroundColor","disabled","behavior","Platform","OS","Scroll","ScrollView","TaskListScreen","nextQuery","q","where","pinnedQuery","TaskList","grouped","useMemo","flattended","reduce","output","inbox","startDate","future","onHold","filter","i","SectionList","sections","keyExtractor","item","renderSectionHeader","section","renderItem","BacklogScreen","IsNull","In","CompletedScreen","Not","WatchingScreen","setTitle","MoreMain","TaskDetails","route","useRoute","useTask","TaskStack","createStackNavigator","TaskStackScreen","Navigator","screenOptions","headerShown","Screen","component","MoreStack","MoreStackScreen","Watching","Completed","MainTab","createBottomTabNavigator","MainTabScreen","tabBarIcon","Today","Backlog","RootStack","RootStackScreen","Group","presentation","AddTask","Router","NavigationContainer","lightTheme","secondary","large","App","light","StatusBar","Expo"],"mappings":"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","file":"static/js/app.08b3b943.chunk.js","sourcesContent":["import { Entity, PrimaryColumn, Column, OneToMany } from 'typeorm';\n\n@Entity()\nclass RemoteTaskProvider {\n  @PrimaryColumn()\n  public id!: string;\n\n  @Column()\n  public type!: string;\n\n  @Column()\n  public config!: string;\n}\n\nexport default RemoteTaskProvider;\n","import { Entity, PrimaryColumn, Column, ManyToOne, ManyToMany } from 'typeorm';\nimport RemoteTaskProvider from './RemoteTaskProvider';\nimport LocalTask from './LocalTask';\n\n@Entity()\nclass RemoteTask {\n  @PrimaryColumn()\n  public id!: string;\n\n  @Column({ nullable: true })\n  public title?: string;\n\n  @Column({ nullable: true })\n  public dataType?: string;\n\n  @Column({ nullable: true })\n  public description?: string;\n\n  @Column({ nullable: true })\n  public open?: boolean;\n\n  @Column({ nullable: true })\n  public raw?: string;\n\n  @Column()\n  public read!: boolean;\n\n  @ManyToOne(() => RemoteTaskProvider)\n  public provider!: RemoteTaskProvider;\n\n  @ManyToMany(() => LocalTask, task => task.remoteTasks)\n  public localTasks!: LocalTask[];\n}\n\nexport default RemoteTask;\n","import { Entity, PrimaryColumn, Column, Tree, ManyToMany, JoinTable, TreeChildren, TreeParent } from 'typeorm';\nimport RemoteTask from './RemoteTask';\n\ntype Statuses =\n  'inbox'\n  | 'watching'\n  | 'backlog'\n  | 'next'\n  | 'on-hold'\n\n@Entity()\n@Tree(\"closure-table\")\nclass LocalTask {\n  @PrimaryColumn()\n  public id!: string;\n\n  @Column()\n  public title!: string;\n\n  @Column({ type: String })\n  public status!: Statuses;\n\n  @Column({ nullable: true })\n  public description?: string;\n\n  @Column({ nullable: true })\n  public completionDate?: Date | null;\n\n  @Column({ nullable: true })\n  public pinned?: boolean;\n\n  @Column({ nullable: true })\n  public startDate?: Date;\n\n  @Column({ nullable: true })\n  public deadline?: Date;\n\n  @ManyToMany(() => RemoteTask)\n  @JoinTable()\n  public remoteTasks!: RemoteTask[];\n\n  // TODO: Add context, location(?), correspondant(?)\n\n  @TreeChildren()\n  public children!: LocalTask[];\n\n  @TreeParent()\n  public parent?: LocalTask;\n}\n\nexport type { Statuses };\n\nexport default LocalTask;\n","import { Service } from 'typedi';\nimport { Connection, Repository } from 'typeorm';\nimport { nanoid } from 'nanoid';\nimport RemoteTaskProvider from '../models/RemoteTaskProvider';\nimport RemoteTask from '../models/RemoteTask';\n\ninterface Provider {\n  getTask: <T extends RemoteTask>(id: string) => Promise<T>;\n}\n\ntype ProviderFactoryList = {\n  [name: string]: (config: any) => Promise<Provider>;\n}\n\nclass ProviderFactories {\n  #factories: ProviderFactoryList;\n  \n  constructor(factories: ProviderFactoryList) {\n    this.#factories = factories;\n  }\n\n  public get = (name: string) => {\n    return this.#factories[name];\n  };\n}\n\n@Service()\nclass ProviderService {\n  #providers: {[name: string]: Promise<Provider>} = {};\n  #providerList: ProviderFactories;\n  #providerRepo: Repository<RemoteTaskProvider>;\n\n  constructor(\n    providerList: ProviderFactories,\n    connection: Connection,\n  ) {\n    this.#providerList = providerList;\n    this.#providerRepo = connection.getRepository(RemoteTaskProvider);\n  }\n\n  public getProviderType = async (id: string) => {\n    const entity = await this.#providerRepo.findOneOrFail({ id });\n    return entity;\n  }\n\n  public getProvider = async (id: string) => {\n    if (!this.#providers[id]) {\n      const entity = await this.#providerRepo.findOneOrFail({ id });\n      const config = JSON.parse(entity.config);\n      const providerTask = this.#providerList.get(entity.type)(config);\n      this.#providers[id] = providerTask;\n    }\n    return this.#providers[id];\n  }\n\n  public add = async (type: string, config: any) => {\n    const provider = new RemoteTaskProvider();\n    provider.id = nanoid();\n    provider.type = type;\n    provider.config = JSON.stringify(config);\n    await this.#providerRepo.save(provider);\n    return provider;\n  }\n\n  public getRemoteTask = async (providerId: string, taskId: string) => {\n    const provider = await this.getProvider(providerId);\n    const task = await provider.getTask(taskId);\n    return task;\n  }\n}\n\nexport { Provider, ProviderFactories, ProviderFactoryList };\n\nexport default ProviderService;\n","import { Service } from 'typedi';\nimport { Connection, EntitySubscriberInterface, EventSubscriber, InsertEvent, RemoveEvent, Repository, SelectQueryBuilder, UpdateEvent } from 'typeorm';\nimport { nanoid } from 'nanoid';\nimport EventEmitter from 'eventemitter3';\nimport LocalTask, { Statuses } from '../models/LocalTask';\nimport RemoteTask from '../models/RemoteTask';\nimport ProviderService from '../services/Providers';\n\ninterface Events {\n  taskUpdated: (id?: string) => void;\n}\n\ntype Query = (query: SelectQueryBuilder<LocalTask>) => SelectQueryBuilder<LocalTask>;\n\n@Service()\n@EventSubscriber()\nclass TaskService extends EventEmitter<Events> implements EntitySubscriberInterface<LocalTask> {\n  #localTaskRepo: Repository<LocalTask>;\n  #remoteTaskRepo: Repository<RemoteTask>;\n  #providerService: ProviderService;\n\n  constructor(\n    connection: Connection,\n    providerService: ProviderService,\n  ) {\n    super();\n    this.#providerService = providerService;\n    this.#localTaskRepo = connection.getRepository(LocalTask);\n    this.#remoteTaskRepo = connection.getRepository(RemoteTask);\n  }\n\n  listenTo() {\n    return LocalTask;\n  }\n\n  afterUpdate(event: UpdateEvent<LocalTask>) {\n    this.emit('taskUpdated', event.entity?.id);\n  }\n \n  afterRemove(event: RemoveEvent<LocalTask>) {\n    this.emit('taskUpdated', event.entity?.id);\n  }\n \n  afterInsert(event: InsertEvent<LocalTask>) {\n    this.emit('taskUpdated', event.entity?.id);\n  }\n \n  public find = async (\n    query: Query = a => a,\n  ) => {\n    const queryBuilder = this.#localTaskRepo.createQueryBuilder();\n    const finalQueryBuilder = query(queryBuilder);\n    const tasks = await finalQueryBuilder.getManyAndCount();\n    return tasks;\n  }\n\n  public getById = async (id: string) => {\n    const task = await this.#localTaskRepo.findOneOrFail({ id }, {\n      relations: ['remoteTasks'],\n    });\n    return task;\n  }\n\n  public toggleCompleted = async (task: LocalTask) => {\n    task.completionDate = task.completionDate ? null : new Date();\n    await this.#localTaskRepo.save(task);\n    this.emit('taskUpdated', task.id);\n  }\n\n  public togglePinned = async (task: LocalTask) => {\n    task.pinned = !task.pinned;\n    await this.#localTaskRepo.save(task);\n    this.emit('taskUpdated', task.id);\n  }\n\n  public setStatus = async (task: LocalTask, status: Statuses) => {\n    task.status = status;\n    await this.#localTaskRepo.save(task);\n    this.emit('taskUpdated', task.id);\n  }\n\n  public create = async (title: string) => {\n    const task = this.#localTaskRepo.create({\n      id: nanoid(),\n      title: title,\n      status: 'inbox',\n    });\n    await this.#localTaskRepo.save(task);\n    this.emit('taskUpdated', task.id);\n    return task;\n  }\n\n  public addRemoteTask = async (localId: string, remoteId: string, providerId: string) => {\n    const current = await this.getById(localId);\n    const providerType = await this.#providerService.getProviderType(providerId);\n    const remoteTask = await this.#providerService.getRemoteTask(providerId, remoteId)\n    remoteTask.provider = providerType;\n    await this.#remoteTaskRepo.save(remoteTask);\n    current.remoteTasks.push(remoteTask);\n    await this.#localTaskRepo.save(current);\n    this.emit('taskUpdated', current.id);\n    return current;\n  };\n}\n\nexport type { Query };\n\nexport default TaskService;\n","import LocalTask from './LocalTask';\nimport RemoteTask from './RemoteTask';\nimport RemoteTaskProvider from './RemoteTaskProvider';\n\nconst models = [\n  LocalTask,\n  RemoteTask,\n  RemoteTaskProvider,\n];\n\nexport default models;\n","import { createConnection, ConnectionOptions, Connection } from 'typeorm';\nimport models from 'models';\n\nconst resetDB = async (connection: Connection) => {\n  const entities = connection.entityMetadatas;\n\n  const tasks = entities.map(async (entity) => {\n    const repository = connection.getRepository(entity.name);\n    await repository.query(`DELETE FROM ${entity.tableName}`);\n  });\n\n  await Promise.all(tasks);\n};\n\nconst createDB = async (options: ConnectionOptions) => {\n  const connection = await createConnection({\n    ...options,\n    entities: [\n      ...models,\n      ...options.entities || [],\n    ],\n  });\n  await connection.synchronize();\n\n  return connection;\n};\n\nexport { resetDB };\n\nexport default createDB;\n","import { useState, useEffect, useCallback } from 'react';\n\nenum States {\n  Loading = 'loading',\n  Refreshing = 'refreshing',\n  Ready = 'ready',\n  Failed = 'failed',\n}\n\nconst useAsync = <T>(fn: () => Promise<T>) => {\n  const [state, setState] = useState<States>(States.Loading);\n  const [error, setError] = useState<any>(undefined);\n  const [result, setResult] = useState<T | undefined>(undefined);\n  const update = useCallback(async () => {\n    setError(undefined);\n    try {\n      setResult(await fn());\n      setState(States.Ready)\n    } catch (err) {\n      setError(err)\n      setState(States.Failed)\n      console.error(err);\n    }\n  }, [fn]);\n\n  useEffect(() => {\n    update();\n  }, [update]);\n\n  return {\n    state,\n    error,\n    result,\n    update,\n  };\n};\n\nexport { States };\n\nexport default useAsync;\n","import axios, { AxiosInstance } from 'axios';\nimport RemoteTask from 'models/RemoteTask';\nimport { Provider } from 'services/Providers';\n\ninterface Config {\n  token?: string;\n}\n\nclass GithubProvider implements Provider {\n  #http: AxiosInstance;\n\n  constructor({ token }: Config) {\n    const headers: {[name: string]: string} = {};\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    this.#http = axios.create({\n      baseURL: 'https://api.github.com',\n      headers,\n    });\n  }\n\n  get http() {\n    return this.#http;\n  }\n\n  public getTask = async (id: string) => {\n    const [repo, issueId] = id.split('|');\n    const { data } = await this.#http.get(`/repos/${repo}/issues/${issueId}`);\n    const task = new RemoteTask();\n    task.id = id;\n    task.title = data.title;\n    task.description = data.body;\n    task.raw = JSON.stringify(data);\n    task.dataType = data.pullRequest ? 'github-pr' : 'github-issue';\n    task.open = data.state === 'open';\n    return data;\n  };\n}\n\nconst setupGithubProvider = async (config: any) => {\n  const githubProvider = new GithubProvider(config.token);\n  return githubProvider;\n};\n\nexport { GithubProvider, setupGithubProvider };\n\nexport default setupGithubProvider;\n","import { ConnectionOptions } from 'typeorm';\n\nconst config: ConnectionOptions = {\n  type: 'sqljs',\n  autoSave: true,\n  location: 'data',\n};\n\nexport default config;\n","import React, { createContext, useState, useCallback, useEffect } from 'react';\nimport { Container } from 'typedi';\nimport TaskService from 'services/Tasks';\nimport createDB from 'db/create';\nimport ProviderService, { ProviderFactories } from 'services/Providers';\nimport githubProvider from 'providers/Github';\nimport dbConfig from 'configs/db';\nimport { Connection, getConnection } from 'typeorm';\n\ninterface ServicesContextValue {\n  taskService: TaskService;\n  providerService: ProviderService;\n}\n\nconst ServicesContext = createContext<ServicesContextValue>({} as any);\n\nconst ServicesProvider: React.FC = ({ children }) => {\n  const [error, setError] = useState<any>(undefined);\n  const [services, setServices] = useState<ServicesContextValue | undefined>(undefined);\n  const setup = useCallback(async () => {\n    const providerFactories = new ProviderFactories({\n      github: githubProvider,\n    });\n    let db: Connection;\n    try {\n      db = getConnection();\n    } catch (err) {\n      db = await createDB(dbConfig);\n    }\n    Container.set(Connection, db);\n    Container.set(ProviderFactories, providerFactories);\n    const providerService = Container.get(ProviderService);\n    const taskService = Container.get(TaskService);\n    setServices({\n      taskService,\n      providerService,\n    })\n  }, []);\n  useEffect(() => {\n    setup().catch((err) => {\n      setError(err);\n      console.error(err);\n    });\n  }, []);\n  if (!services) {\n    return <></>;\n  }\n  return (\n    <ServicesContext.Provider value={services}>\n      {children}\n    </ServicesContext.Provider>\n  );\n};\n\nexport { ServicesProvider };\n\nexport default ServicesContext;\n","import { useContext, useCallback, useEffect } from 'react';\nimport ServicesContext from 'contexts/ServicesContext';\nimport useAsync from './useAsync';\nimport LocalTask from 'models/LocalTask';\nimport type { Query } from 'services/Tasks';\n\nconst useTasks = (query?: Query) => {\n  const { taskService } = useContext(ServicesContext);\n  const fetch = useCallback(async () => {\n    const [result] = await taskService.find(query);\n    return result;\n  }, [query]);\n  const current = useAsync(fetch);\n\n  const toggleCompleted = useCallback(async (task: LocalTask) => {\n    await taskService.toggleCompleted(task);\n  }, [taskService, current.update]);\n\n  const togglePinned = useCallback(async (task: LocalTask) => {\n    await taskService.togglePinned(task);\n  }, [taskService, current.update]);\n\n  useEffect(() => {\n    const listener = () => {\n      current.update();\n    };\n    taskService.addListener('taskUpdated', listener);\n    return () => {\n      taskService.removeListener('taskUpdated', listener);\n    };\n  }, [taskService]);\n\n  return {\n    ...current,\n    toggleCompleted,\n    togglePinned,\n    service: taskService,\n  };\n};\n\nconst usePinnedQuery = () => {\n  const pinnedQuery: Query = useCallback(q => q.where({ pinned: true }), []);\n  return pinnedQuery;\n}\n\nconst useNextQuery = () => {\n  const nextQuery: Query = useCallback(\n    q => q\n      .where({\n        completionDate: null,\n        status: 'next',\n      }),\n    [],\n  );\n  return nextQuery;\n};\n\nexport type { Query };\nexport { usePinnedQuery, useNextQuery };\nexport default useTasks;\n","import styled from 'styled-components/native';\nimport { Theme } from 'theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) => color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => bold ? 'bold' : 'normal'};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo =  styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\n\nconst Title2 =  styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 =  styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 =  styled(BaseText)`\n`;\n\nconst Overline =  styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption =  styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link =  styled(BaseText)`\n  text-transform: uppercase;\n`;\n\n\nexport type { TextProps };\nexport {\n  Jumbo,\n  Title2,\n  Title1,\n  Body1,\n  Overline,\n  Caption,\n  Link,\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Theme } from 'theme';\n\ninterface Props {\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center';\n}\n\nconst Wrapper = styled.View<{\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme}) => theme.margins.medium / 2}px;\n  ${({ background }) => background ? `background: ${background};` : ''}\n  ${({ flex }) => flex ? `flex: ${flex};` : ''}\n  flex-direction: ${({ direction }) => direction ? direction : 'row'};\n  align-items: ${({ align }) => align ? align : 'center'};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...others }) => {\n  const node = (\n    <Wrapper {...others}>\n      {children}\n    </Wrapper>\n  );\n  if (onPress) {\n    return (\n      <Touch onPress={onPress}>\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport default Cell;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport Cell from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number, color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({ color = 'red', size = 24, onPress }) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport default PlaceholderIcon;\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from 'typography';\nimport Cell from './Cell';\nimport PlaceholderIcon from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (input: ReactNode, Component: React.FC<{ children: ReactNode }>) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n}\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Cell, PlaceholderIcon };\nexport default Row;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Theme } from 'theme';\nimport { Link } from 'typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Wrapper = styled.View<{ theme: Theme }>`\n  background: ${({ theme }) => theme.colors.primary};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n`;\n\nconst Button: React.FC<Props> = ({ title, onPress, type }) => (\n  <Touch onPress={onPress}>\n    <Wrapper>\n      <Link style={{ color: '#fff' }}>{title}</Link>\n    </Wrapper>\n  </Touch>\n);\n\nexport default Button;\n","import React, { ReactNode } from 'react';\nimport { View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport Row, { Cell } from 'components/base/Row';\nimport Button from 'components/base/Button';\nimport { Jumbo } from 'typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View style={{ marginTop: insets.top }}>\n      <Row\n        left={!!back && (\n          <Cell onPress={() => navigation.goBack()}>\n            <Ionicons name=\"arrow-back-circle\" size={26} />\n          </Cell>\n        )}\n        right={(actions || right) && (\n          <>\n            {actions && actions.map((action) => (\n              <Button\n                key={action.title}\n                title={action.title}\n                onPress={action.onPress}\n              />\n            ))}\n            {right}\n          </>\n        )}\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </View>\n  );\n}\n\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport { Cell } from 'components/base/Row';\nimport LocalTask, { Statuses } from 'models/LocalTask';\n\ninterface Props {\n  task: LocalTask;\n  icon: ReactNode;\n  allowedTransitions?: Statuses[];\n  transition: Statuses;\n  changeStatus?: (status: Statuses) => any;\n}\n\nconst ListItemTransition: React.FC<Props> = ({ icon, task, transition, allowedTransitions, changeStatus }) => {\n  if (\n    !changeStatus ||\n    (task.status === transition) ||\n    (allowedTransitions && !allowedTransitions.includes(transition))\n  ) {\n    return <></>;\n  }\n  return (\n    <Cell onPress={() => changeStatus(transition)}>\n      {icon}\n    </Cell>\n  );\n};\n\nexport default ListItemTransition;\n","import React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport Row, { Cell } from 'components/base/Row';\nimport LocalTask, { Statuses } from 'models/LocalTask';\nimport Transition from './Transition';\n\ninterface Props {\n  task: LocalTask;\n  allowedTransitions?: Statuses[];\n  onPress?: () => any;\n  toggleCompleted?: () => any;\n  togglePinned?: () => any;\n  changeStatus?: (status: Statuses) => any;\n}\n\nconst ListItem: React.FC<Props> = ({\n  task,\n  toggleCompleted,\n  togglePinned,\n  onPress,\n  changeStatus,\n  allowedTransitions,\n}) => {\n  return (\n    <Row\n      onPress={onPress}\n      left={(\n        <Cell onPress={toggleCompleted}>\n          {task.completionDate ? (\n            <Ionicons size={26} name=\"checkmark-circle-outline\" />\n          ) : (\n            <Ionicons size={26} name=\"radio-button-off-outline\" />\n          )}\n        </Cell>\n      )}\n      title={task.title}\n      right={(\n        <>\n          <Transition\n            task={task}\n            allowedTransitions={allowedTransitions}\n            transition=\"inbox\"\n            icon={<Ionicons name=\"mail-open-outline\" size={26} />}\n            changeStatus={changeStatus}\n          />\n          <Transition\n            task={task}\n            icon={<Ionicons name=\"eye-outline\" size={26} />}\n            allowedTransitions={allowedTransitions}\n            transition=\"watching\"\n            changeStatus={changeStatus}\n          />\n          <Transition\n            task={task}\n            icon={<Ionicons name=\"albums-outline\" size={26} />}\n            allowedTransitions={allowedTransitions}\n            transition=\"backlog\"\n            changeStatus={changeStatus}\n          />\n          <Transition\n            task={task}\n            icon={<Ionicons name=\"bookmark-outline\" size={26} />}\n            allowedTransitions={allowedTransitions}\n            transition=\"next\"\n            changeStatus={changeStatus}\n          />\n          {togglePinned && (\n            <Cell onPress={togglePinned}>\n              <Ionicons\n                name={task.pinned ? 'star' : 'star-outline'}\n                size={26}\n              />\n            </Cell>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport useTasks, { Query } from 'hooks/useTasks';\nimport TaskListItem from 'components/task/ListItem';\nimport Row from 'components/base/Row';\nimport { RootStackNavigationProps } from 'Router';\n\ninterface Props {\n  title?: string;\n  query?: Query;\n}\n\nconst TaskGroup: React.FC<Props> = ({ title, query }) => {\n  const navigation = useNavigation<RootStackNavigationProps>();\n  const tasks = useTasks(query);\n  if (tasks.state === 'loading' || !tasks.result || tasks.result.length < 1) {\n    return <></>\n  }\n  return (\n    <>\n      {title && <Row title={title} />}\n      {tasks.result && tasks.result.map((task) => (\n        <TaskListItem\n          key={task.id}\n          task={task}\n          onPress={() => navigation.navigate('Task', {\n            screen: 'TaskDetails',\n            params: { id: task.id }\n          })}\n          togglePinned={() => tasks.togglePinned(task)}\n          toggleCompleted={() => tasks.toggleCompleted(task)}\n        />\n      ))}\n    </>\n  )\n};\n\nexport default TaskGroup;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Theme } from 'theme';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText: (text: string) => any;\n}\n\nconst InputField = styled.TextInput<{ theme: Theme }>`\n  background: ${({ theme }) => theme.colors.shade};\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({ label, value, onChangeText }) => (\n  <InputField\n    value={value}\n    placeholder={label}\n    onChangeText={onChangeText}\n  />\n);\n\nexport default Input;\n","import { useContext, useCallback } from 'react';\nimport ServicesContext from 'contexts/ServicesContext';\n\nconst useAddTask = () => {\n  const { taskService } = useContext(ServicesContext);\n  const addTask = useCallback(async (title: string) => {\n    await taskService.create(title);\n  }, [taskService]);\n  return addTask;\n};\n\nexport default useAddTask;\n","import React, { useState, useCallback } from 'react';\nimport { Ionicons } from '@expo/vector-icons'\nimport { useTheme } from 'styled-components/native';\nimport { Keyboard } from 'react-native';\nimport { Theme } from 'theme';\nimport Row, { Cell } from 'components/base/Row';\nimport Input from 'components/base/Input';\nimport useAddTask from 'hooks/useAddTask';\n\nconst AddToInbox: React.FC<{}> = () => {\n  const theme = useTheme()\n  const addTask = useAddTask();\n  const [value, setValue] = useState('');\n\n  const add = useCallback(async () => {\n    await addTask(value);\n    setValue('');\n    Keyboard.dismiss();\n  }, [addTask, value]);\n\n  return (\n    <Row\n      right={(\n        <Cell onPress={add}>\n          <Ionicons\n            name=\"add-circle-outline\"\n            size={26}\n            color={theme.colors.primary}\n          />\n        </Cell>\n      )}\n    >\n      <Input\n        label=\"Add task to inbox\"\n        value={value}\n        onChangeText={setValue}\n      />\n    </Row>\n  )\n};\n\nexport default AddToInbox;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Keyboard, Pressable, Platform } from 'react-native';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Page: React.FC = ({ children }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    Keyboard.addListener(\"keyboardDidShow\", keyboardDidShow);\n    Keyboard.addListener(\"keyboardDidHide\", keyboardDidHide);\n\n    return () => {\n      Keyboard.removeListener(\"keyboardDidShow\", keyboardDidShow);\n      Keyboard.removeListener(\"keyboardDidHide\", keyboardDidHide);\n    };\n  }, []);\n  return (\n    <Pressable\n      style={{ backgroundColor: '#fff', flex: 1 }}\n      disabled={!keyboardShown}\n      onPress={() => Keyboard.dismiss()}\n    >\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {children}\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport default Page;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useNextQuery, usePinnedQuery } from 'hooks/useTasks';\nimport Header from 'components/base/Header';\nimport { RootStackNavigationProps } from 'Router';\nimport TaskGroup from 'containers/tasks/Group';\nimport AddToInbox from 'containers/tasks/AddToInbox';\nimport Page from 'components/Page';\n\nconst Scroll = styled.ScrollView`\n  flex: 1;\n`\n\nconst TaskListScreen: React.FC<{}> = () => {\n  const navigation = useNavigation<RootStackNavigationProps>();\n  const add = useCallback(async () => {\n    navigation.navigate('AddTask');\n  }, []);\n  const nextQuery = useNextQuery();\n  const pinnedQuery = usePinnedQuery();\n\n  return (\n    <Page>\n      <Header title=\"Today\" />\n      <AddToInbox />\n      <Scroll>\n        <TaskGroup title=\"Focus\" query={pinnedQuery} />\n        <TaskGroup title=\"Next\" query={nextQuery} />\n      </Scroll>\n    </Page>\n  )\n};\n\nexport default TaskListScreen;\n","import React, { useMemo, useCallback } from 'react';\nimport { SectionList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport useTasks, { Query } from 'hooks/useTasks';\nimport TaskListItem from 'components/task/ListItem';\nimport Row from 'components/base/Row';\nimport { RootStackNavigationProps } from 'Router';\nimport LocalTask, { Statuses } from 'models/LocalTask';\n\ninterface Props {\n  query?: Query;\n}\n\ninterface Flattended {\n  inbox: LocalTask[];\n  current: LocalTask[];\n  future: LocalTask[];\n  onHold: LocalTask[];\n}\n\nconst TaskList: React.FC<Props> = ({ query }) => {\n  const navigation = useNavigation<RootStackNavigationProps>();\n  const tasks = useTasks(query);\n  const setStatus = useCallback(async (task: LocalTask, status: Statuses) => {\n    await tasks.service.setStatus(task, status);\n  }, [tasks.service]);\n  const grouped = useMemo(\n    () => {\n      const flattended = (tasks.result || []).reduce((output, current) => {\n        if (current.status === 'inbox') {\n          output.inbox.push(current);\n        } else if (current.startDate && current.startDate > new Date()) {\n          output.future.push(current);\n        } else if (current.status === 'on-hold') {\n          output.onHold.push(current);\n        } else {\n          output.current.push(current);\n        }\n        return output;\n      }, { inbox: [], current: [], future: [], onHold: [] } as Flattended);\n      return [{\n        title: 'Inbox',\n        data: flattended.inbox,\n      }, {\n        title: 'Ready',\n        data: flattended.current,\n      }, {\n        title: 'On hold',\n        data: flattended.onHold,\n      }, {\n        title: 'Future',\n        data: flattended.future,\n      }].filter(i => i.data.length > 0);\n    },\n    [tasks.result],\n  );\n\n  return (\n    <SectionList\n      style={{ flex: 1 }}\n      sections={grouped}\n      keyExtractor={item => item.id}\n      renderSectionHeader={({ section: { title } }) => (\n        <Row title={title} background=\"#fff\" />\n      )}\n      renderItem={({ item: task}) => (\n        <TaskListItem\n          key={task.id}\n          task={task}\n          onPress={() => navigation.navigate('Task', {\n            screen: 'TaskDetails',\n            params: { id: task.id }\n          })}\n          changeStatus={(status) => setStatus(task, status)}\n          togglePinned={() => tasks.togglePinned(task)}\n          toggleCompleted={() => tasks.toggleCompleted(task)}\n        />\n      )}\n    />\n  );\n};\n\nexport default TaskList;\n","import React, { useCallback } from 'react';\nimport { Query } from 'hooks/useTasks';\nimport Header from 'components/base/Header';\nimport TaskList from 'containers/tasks/List';\nimport AddToInbox from 'containers/tasks/AddToInbox';\nimport { In, IsNull } from 'typeorm';\nimport Page from 'components/Page';\n\nconst BacklogScreen: React.FC<{}> = () => {\n  const query: Query = useCallback(\n    q => q.where({\n      completionDate: IsNull(),\n      status: In(['inbox', 'backlog'])\n    }),\n    [],\n  );\n\n  return (\n    <Page>\n      <Header title=\"Planning\" />\n      <AddToInbox />\n      <TaskList query={query} />\n    </Page>\n  )\n};\n\nexport default BacklogScreen;\n","import React, { useCallback } from 'react';\nimport { Query } from 'hooks/useTasks';\nimport Header from 'components/base/Header';\nimport TaskList from 'containers/tasks/List';\nimport { IsNull, Not } from 'typeorm';\nimport Page from 'components/Page';\n\nconst CompletedScreen: React.FC<{}> = () => {\n  const query: Query = useCallback(\n    q => q.where({\n      completionDate: Not(IsNull()),\n    }),\n    [],\n  );\n\n  return (\n    <Page>\n      <Header\n        title=\"Completed\"\n        back\n      />\n      <TaskList query={query} />\n    </Page>\n  )\n};\n\nexport default CompletedScreen;\n","import React, { useCallback } from 'react';\nimport { Query } from 'hooks/useTasks';\nimport Header from 'components/base/Header';\nimport TaskList from 'containers/tasks/List';\nimport { IsNull } from 'typeorm';\nimport Page from 'components/Page';\n\nconst WatchingScreen: React.FC<{}> = () => {\n  const query: Query = useCallback(q => q.where({ status: 'watching', completionDate: IsNull() }), []);\n\n  return (\n    <Page>\n      <Header\n        title=\"Watching\"\n        back\n      />\n      <TaskList query={query} />\n    </Page>\n  )\n};\n\nexport default WatchingScreen;\n","import React, { useState, useCallback } from 'react';\nimport useAddTask from 'hooks/useAddTask';\nimport { useNavigation } from '@react-navigation/native';\nimport { RootStackNavigationProps } from 'Router';\nimport { Ionicons } from '@expo/vector-icons';\nimport Header from 'components/base/Header';\nimport Row, { Cell } from 'components/base/Row';\nimport Input from 'components/base/Input';\n\nconst TaskListScreen: React.FC<{}> = () => {\n  const navigation = useNavigation<RootStackNavigationProps>();\n  const [title, setTitle] = useState('');\n  const addTask = useAddTask();\n  const add = useCallback(async () => {\n    await addTask(title);\n    navigation.goBack();\n  }, [addTask, title, navigation]);\n\n  return (\n    <>\n      <Header\n        title=\"Add Task\"\n        back\n        right={(\n          <Cell onPress={add}>\n            <Ionicons size={26} name=\"add-circle-outline\" />\n          </Cell>\n        )}\n      />\n      <Row>\n        <Input\n          label=\"Title\"\n          value={title}\n          onChangeText={setTitle}\n        />\n      </Row>\n    </>\n  )\n};\n\nexport default TaskListScreen;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { MoreStackNavigationProps } from 'Router';\nimport Header from 'components/base/Header';\nimport Page from 'components/Page';\nimport Row, { Cell } from 'components/base/Row';\nimport { Ionicons } from '@expo/vector-icons';\n\nconst Scroll = styled.ScrollView`\n  flex: 1;\n`\nconst MoreMain: React.FC<{}> = () => {\n  const navigation = useNavigation<MoreStackNavigationProps>();\n  return (\n    <Page>\n      <Header title=\"More\" />\n      <Scroll>\n        <Row\n          title=\"Watching\"\n          onPress={() => navigation.navigate('Watching')}\n          left={(\n            <Cell><Ionicons name=\"eye-outline\" size={26} /></Cell>\n          )}\n          right={(\n            <Cell><Ionicons name=\"chevron-forward-outline\" size={26} /></Cell>\n          )}\n        />\n        <Row\n          title=\"Completed\"\n          onPress={() => navigation.navigate('Completed')}\n          left={(\n            <Cell><Ionicons name=\"checkmark-circle-outline\" size={26} /></Cell>\n          )}\n          right={(\n            <Cell><Ionicons name=\"chevron-forward-outline\" size={26} /></Cell>\n          )}\n        />\n      </Scroll>\n    </Page>\n  );\n};\n\nexport default MoreMain;\n","import { useContext, useCallback, useEffect } from 'react';\nimport ServicesContext from 'contexts/ServicesContext';\nimport useAsync from './useAsync';\n\nconst useTasks = (id: string) => {\n  const { taskService } = useContext(ServicesContext);\n  const fetch = useCallback(async () => {\n    const result = await taskService.getById(id)\n    return result;\n  }, [id]);\n  const current = useAsync(fetch);\n\n  useEffect(() => {\n    const listener = (id?: string) => {\n      if (id === current.result?.id) {\n        current.update();\n      }\n    };\n    taskService.addListener('taskUpdated', listener);\n    return () => {\n      taskService.removeListener('taskUpdated', listener);\n    };\n  }, [taskService, current.result]);\n\n  return {\n    ...current,\n    service: taskService,\n  };\n};\n\nexport default useTasks;\n","import React, { useCallback } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport Header from 'components/base/Header';\nimport ListItem from 'components/task/ListItem';\nimport useTask from 'hooks/useTask';\nimport { Statuses } from 'models/LocalTask';\n\nconst TaskDetails: React.FC<{}> = () => {\n  const route = useRoute();\n  // TODO: Fix type\n  const task = useTask((route.params as any).id);\n\n  const changeStatus = useCallback(async (status: Statuses) => {\n    if (!task.result) return;\n    await task.service.setStatus(task.result, status);\n  }, [task.service, task.result]);\n\n  const toggleCompleted = useCallback(async () => {\n    if (!task.result) return;\n    await task.service.toggleCompleted(task.result);\n  }, [task.service, task.result]);\n\n  const togglePinned = useCallback(async () => {\n    if (!task.result) return;\n    await task.service.togglePinned(task.result);\n  }, [task.service, task.result]);\n\n  if (!task.result) {\n    return <></>;\n  }\n\n  return (\n    <>\n      <Header title=\"Details\" back />\n      <ListItem\n        task={task.result}\n        changeStatus={changeStatus}\n        toggleCompleted={toggleCompleted}\n        togglePinned={togglePinned}\n      />\n    </>\n  );\n}\n\nexport default TaskDetails;\n","import React from 'react';\nimport { NavigationContainer, NavigatorScreenParams } from '@react-navigation/native';\nimport { createStackNavigator, StackNavigationProp } from '@react-navigation/stack';\nimport { createBottomTabNavigator, BottomTabNavigationProp } from '@react-navigation/bottom-tabs';\nimport Today from 'screens/tasks/Today';\nimport Backlog from 'screens/tasks/Backlog';\nimport Completed from 'screens/tasks/Completed';\nimport Watching from 'screens/tasks/Watching';\nimport AddTask from 'screens/tasks/Add';\nimport MoreMain from 'screens/more/Main';\nimport TaskDetails from 'screens/tasks/Details';\nimport { Ionicons } from '@expo/vector-icons';\n\ntype TaskStackParamList = {\n  TaskDetails: { id: string};\n};\n\ntype TaskStackNavigationProps = StackNavigationProp<TaskStackParamList>;\n\nconst TaskStack = createStackNavigator<TaskStackParamList>();\n\nconst TaskStackScreen: React.FC<{}> = () => (\n  <TaskStack.Navigator screenOptions={{ headerShown: false }}>\n    <TaskStack.Screen name=\"TaskDetails\" component={TaskDetails} />\n  </TaskStack.Navigator>\n);\n\ntype MoreStackParamList = {\n  Main: undefined;\n  Completed: undefined;\n  Watching: undefined;\n}\n\ntype MoreStackNavigationProps = StackNavigationProp<MoreStackParamList>;\n\nconst MoreStack = createStackNavigator();\n\nconst MoreStackScreen: React.FC<{}> = () => (\n  <MoreStack.Navigator screenOptions={{ headerShown: false }}>\n    <MoreStack.Screen name=\"Main\" component={MoreMain} />\n    <MoreStack.Screen name=\"Watching\" component={Watching} />\n    <MoreStack.Screen name=\"Completed\" component={Completed} />\n  </MoreStack.Navigator>\n);\n\ntype MainTabParamList = {\n  Today: undefined;\n  Planning: undefined;\n  Watching: undefined;\n  More: StackNavigationProp<MoreStackParamList>;\n};\n\ntype MainTabNavigationProps = BottomTabNavigationProp<MainTabParamList>;\n\nconst MainTab = createBottomTabNavigator<MainTabParamList>();\n\nconst MainTabScreen: React.FC<{}> = () => (\n  <MainTab.Navigator screenOptions={{ headerShown: false }}>\n    <MainTab.Screen\n      options={{ tabBarIcon: () => <Ionicons name=\"bookmark-outline\" size={26} />}}\n      name=\"Today\"\n      component={Today}\n    />\n    <MainTab.Screen\n      options={{ tabBarIcon: () => <Ionicons name=\"albums-outline\" size={26} />}}\n      name=\"Planning\"\n      component={Backlog}\n    />\n    <MainTab.Screen\n      options={{ tabBarIcon: () => <Ionicons name=\"menu\" size={26} />}}\n      name=\"More\"\n      component={MoreStackScreen}\n    />\n  </MainTab.Navigator>\n);\n\ntype RootStackParamList = {\n  Main: NavigatorScreenParams<MainTabParamList>;\n  AddTask: undefined;\n  Task: NavigatorScreenParams<TaskStackParamList>;\n}\n\ntype RootStackNavigationProps = StackNavigationProp<RootStackParamList>;\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n\nconst RootStackScreen: React.FC<{}> = () => (\n  <RootStack.Navigator screenOptions={{ headerShown: false }}>\n    <RootStack.Group>\n      <RootStack.Screen name=\"Main\" component={MainTabScreen} />\n    </RootStack.Group>\n    <RootStack.Group screenOptions={{ presentation: 'modal' }}>\n      <RootStack.Screen name=\"AddTask\" component={AddTask} />\n    </RootStack.Group>\n    <RootStack.Group screenOptions={{ presentation: 'modal' }}>\n      <RootStack.Screen name=\"Task\" component={TaskStackScreen} />\n    </RootStack.Group>\n  </RootStack.Navigator>\n);\n\nconst Router: React.FC<{}> = () => (\n  <NavigationContainer>\n    <RootStackScreen />\n  </NavigationContainer>\n);\n\nexport type {\n  TaskStackParamList,\n  TaskStackNavigationProps,\n  MoreStackParamList,\n  MoreStackNavigationProps,\n  MainTabParamList,\n  MainTabNavigationProps,\n  RootStackParamList,\n  RootStackNavigationProps,\n};\n\nexport default Router;\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    shade: '#ededed',\n    secondary: 'blue',\n    background: '#fff',\n    text: '#000',\n  },\n  sizes: {\n    corners: 5,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import 'react-native-get-random-values';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport { ThemeProvider } from 'styled-components/native';\nimport React from 'react';\nimport { View } from 'react-native';\nimport { ServicesProvider } from 'contexts/ServicesContext';\nimport Router from 'Router';\nimport { light } from 'theme';\n\nconst App: React.FC<{}> = () => (\n  <SafeAreaProvider>\n    <ThemeProvider theme={light}>\n      <ServicesProvider>\n        <View style={{ flex: 1 }}>\n          <Router />\n          <StatusBar style=\"auto\" />\n        </View>\n      </ServicesProvider>\n    </ThemeProvider>\n  </SafeAreaProvider>\n);\n\nexport default App;\n","import 'reflect-metadata';\nimport * as Expo from 'expo'\n// import * as Sentry from 'sentry-expo';\nimport App from './App';\n\n/* if (!__DEV__) {\n  Sentry.init({\n    dsn: process.env.SENTRY_DSN,\n  });\n}*/\n\nexport default Expo.registerRootComponent(App);\n"],"sourceRoot":""}